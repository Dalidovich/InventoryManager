// <auto-generated />
using System;
using InventoryManager.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InventoryManager.DAL.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250809182642_update1")]
    partial class update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InventoryManager.Domain.Entities.AccessAccountToInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("pk_slave_account_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("pk_inventory_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_master_account_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id", "AttachedEntityId");

                    b.HasIndex("AttachedEntityId");

                    b.HasIndex("CreatorId");

                    b.ToTable("access_account_to_inventory", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<short>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("salt");

                    b.Property<short>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_comment_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_inventory_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("fk_creator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AttachedEntityId");

                    b.HasIndex("CreatorId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_inventory_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_creator_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("ImgURL")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("img_url");

                    b.Property<short>("State")
                        .HasColumnType("smallint")
                        .HasColumnName("state");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AttachedEntityId");

                    b.HasIndex("CreatorId");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.InventoryCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_inventory_category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("inventory_category", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.InventoryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_inventory_object_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_inventory_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_creator_id");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_template");

                    b.Property<short>("SequenceId")
                        .HasColumnType("smallint")
                        .HasColumnName("sequence_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("login");

                    b.HasKey("Id");

                    b.HasIndex("AttachedEntityId");

                    b.HasIndex("CreatorId");

                    b.ToTable("inventory_object", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_like_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_inventory_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_creator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AttachedEntityId");

                    b.ToTable("like", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.ObjectField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_object_field_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_inventory_object_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_creator_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean")
                        .HasColumnName("visible");

                    b.HasKey("Id");

                    b.HasIndex("AttachedEntityId");

                    b.HasIndex("CreatorId");

                    b.ToTable("object_field", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_tag_id");

                    b.Property<Guid>("AttachedEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("fk_inventory_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("fk_creator_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("content");

                    b.HasKey("Id");

                    b.HasIndex("AttachedEntityId");

                    b.ToTable("tag", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.TokenData", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_token_data_account_id");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("refresh_token");

                    b.HasKey("AccountId");

                    b.HasIndex("RefreshToken");

                    b.ToTable("token_data", (string)null);
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.AccessAccountToInventory", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManager.Domain.Entities.Account", "MasterAccount")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManager.Domain.Entities.Account", "SlaveAccount")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("MasterAccount");

                    b.Navigation("SlaveAccount");
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Comment", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.Inventory", null)
                        .WithMany("Comments")
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManager.Domain.Entities.Account", "Author")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.InventoryCategory", "Category")
                        .WithMany()
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManager.Domain.Entities.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.InventoryObject", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.Inventory", null)
                        .WithMany("InventoryObjects")
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManager.Domain.Entities.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Like", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.InventoryObject", null)
                        .WithMany("Likes")
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.ObjectField", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.InventoryObject", null)
                        .WithMany("ObjectFields")
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManager.Domain.Entities.Account", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Tag", b =>
                {
                    b.HasOne("InventoryManager.Domain.Entities.InventoryObject", null)
                        .WithMany("Tags")
                        .HasForeignKey("AttachedEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("InventoryObjects");
                });

            modelBuilder.Entity("InventoryManager.Domain.Entities.InventoryObject", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("ObjectFields");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
